@using Marketplace_3d_Assets.DataAccess.Entities
@using Marketplace_3d_Assets.PresentationLayer.ViewModels
@model List<AssetCardViewModel>


<link rel="stylesheet" href="~/css/Index.css" />
@if (TempData["SuccessMessage"] != null)
{
    <div id="toast" class="toast-notification show">
        @TempData["SuccessMessage"]
    </div>
}
<form method="get" asp-controller="Home" asp-action="Index" class="filter-form">
    <div class="search-container">
        <input type="text" name="SearchQuery" placeholder="Поиск..." class="search-box" value="@Context.Request.Query["SearchQuery"]" />
    </div>
    <div class="filter-row">
        <select name="TypeId">
            <option value="">Все типы</option>
            @foreach (var type in ViewBag.Types as List<AssetTypeEntity>)
            {
                <option value="@type.Type_Id" selected="@(Context.Request.Query["TypeId"] == type.Type_Id.ToString())">@type.Name</option>
            }
        </select>

        <input type="number" name="MinPrice" placeholder="Мин. цена" value="@Context.Request.Query["MinPrice"]" />
        <input type="number" name="MaxPrice" placeholder="Макс. цена" value="@Context.Request.Query["MaxPrice"]" />

        <select name="SortBy">
            <option value="">Сортировка</option>
            <option selected="@(Context.Request.Query["SortBy"] == "price")" value="price" >Цена</option>
            <option selected="@(Context.Request.Query["SortBy"] == "likes")" value="likes">Лайки</option>
            <option selected="@(Context.Request.Query["SortBy"] == "comments")" value="comments">Комментарии</option>
        </select>

        <select name="SortDescending">
            <option selected="@(Context.Request.Query["SortDescending"] == "false")" value="false">По возрастанию</option>
            <option selected="@(Context.Request.Query["SortDescending"] == "true")" value="true">По убыванию</option>
        </select>

        <button type="submit">Применить</button>
    </div>
</form>

<div class="assets-grid">
    @foreach (var asset in Model)
    {
        <a href="@Url.Action("AssetDetails", "Asset", new {id = asset.Id})">
            <div class="asset-card">
            
                <img src="@asset.Asset_Image" alt="@asset.Title" class="asset-image" />
                <h3>@asset.Title</h3>
                <p>@asset.Type_Name</p>
                <p>@asset.Author_Name</p>
                <p>@asset.Price</p>
                <div class="asset-stats">
                    <div class="stat-item">
                        <i class="fas fa-shopping-cart"></i> @asset.Count_Of_Copies_Sold
                    </div>
                    <div class="stat-item">
                        <i class="fas fa-comments"></i> @asset.Count_Of_Comments
                    </div>
                    <div class="stat-item">
                        <i class="fas fa-eye"></i> @asset.Count_Of_Views
                    </div>
                    <div class="stat-item like-container" id="like-btn" data-asset-id="@asset.Id">
                        <i class="fas fa-heart"></i> @asset.Count_Of_Likes
                    </div>
                </div>
                @* <div class="tags">
                    @foreach (var tag in asset.Tags)
                    {
                        <span class="tag">@tag</span>
                    }
                </div> *@
            </div>
        </a>
    }
</div>
<div class="pagination">
    @{
        int totalPages = ViewBag.TotalPages;
        int currentPage = ViewBag.CurrentPage;

        for (int i = 1; i <= totalPages; i++)
        {
            <a href="@Url.Action("Index", new {
                    Page = i,
                    SearchQuery = Context.Request.Query["SearchQuery"],
                    TypeId = Context.Request.Query["TypeId"],
                    SortBy = Context.Request.Query["SortBy"],
                    SortDescending = Context.Request.Query["SortDescending"],
                    MinPrice = Context.Request.Query["MinPrice"],
                    MaxPrice = Context.Request.Query["MaxPrice"]
                })"
               class="@(i == currentPage ? "active" : "")">@i</a>
        }
    }
</div>
<script>
    document.getElementById("like-btn").addEventListener("click", function () {
        var assetId = this.getAttribute("data-asset-id");
        fetch('/Asset/ToggleLike?assetId=' + assetId, { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                document.getElementById("like-count").innerText = data.likesCount;
            });
    });
</script>
<script>
    window.addEventListener('DOMContentLoaded', (event) => {
        const toast = document.getElementById('toast');
        if (toast) {
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }
    });
</script>